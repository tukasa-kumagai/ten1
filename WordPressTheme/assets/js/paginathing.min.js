"use strict";

!function () {
  "use strict";

  !function (t, a, e) {
    var i = function i(a, e) {
      this.el = t(a), this.options = t.extend({}, t.fn.paginathing.defaults, e), this.startPage = 1, this.currentPage = 1, this.totalItems = this.el.children().length;
      var i = Math.ceil(this.totalItems / this.options.perPage);
      return i < this.options.limitPagination && (this.options.limitPagination = i), this.totalPages = Math.max(i, this.options.limitPagination), this.container = t("<nav></nav>").addClass(this.options.containerClass).attr("aria-label", "Page navigation"), this.ul = t("<ul></ul>").addClass(this.options.ulClass), this.show(this.startPage), this;
    };
    i.prototype = {
      pagination: function pagination(a, e) {
        var i = this,
          s = t("<li></li>"),
          n = t("<a></a>").attr("href", "#").addClass(i.options.linkClass);
        var r;
        return r = "number" === a ? e : "pageNumbers" === a ? i.paginationNumbersText() : i.paginationText(a), s.addClass(i.options.liClass).addClass(a), s.data("pagination-type", a), s.data("page", e), s.append(n.html(r)), s;
      },
      paginationText: function paginationText(t) {
        return this.options[t + "Text"];
      },
      paginationNumbersText: function paginationNumbersText() {
        return "Page " + this.currentPage + "/" + this.totalPages;
      },
      buildPagination: function buildPagination() {
        var t = this,
          a = [],
          e = this.currentPage - 1 < t.startPage ? t.startPage : t.currentPage - 1,
          i = t.currentPage + 1 > t.totalPages ? t.totalPages : t.currentPage + 1;
        var s, n;
        var r = t.options.limitPagination;
        r ? t.currentPage <= Math.ceil(r / 2) + 1 ? (s = 1, n = r) : t.currentPage + Math.floor(r / 2) >= t.totalPages ? (s = t.totalPages + 1 - r, n = t.totalPages) : (s = t.currentPage - Math.ceil(r / 2), n = t.currentPage + Math.floor(r / 2)) : (s = t.startPage, n = t.totalPages), t.options.firstLast && a.push(t.pagination("first", t.startPage)), t.options.prevNext && a.push(t.pagination("prev", e));
        for (var _e = s; _e <= n; _e++) a.push(t.pagination("number", _e));
        return t.options.prevNext && a.push(t.pagination("next", i)), t.options.firstLast && a.push(t.pagination("last", t.totalPages)), t.options.pageNumbers && a.push(t.pagination("pageNumbers", t.currentPage)), a;
      },
      render: function render(a) {
        var e = this,
          i = e.options,
          s = e.buildPagination();
        e.ul.children().remove(), e.ul.append(s);
        var n = 1 === a ? 0 : (a - 1) * i.perPage,
          r = a * i.perPage;
        e.el.children().hide(), e.el.children().slice(n, r).show(), e.ul.children().each(function () {
          var s = t(this);
          switch (s.data("pagination-type")) {
            case "number":
              s.data("page") === a && s.addClass(i.activeClass);
              break;
            case "first":
              a === e.startPage && s.toggleClass(i.disabledClass).attr("aria-disabled", "true");
              break;
            case "last":
              a === e.totalPages && s.toggleClass(i.disabledClass).attr("aria-disabled", "true");
              break;
            case "prev":
              a - 1 < e.startPage && s.toggleClass(i.disabledClass).attr("aria-disabled", "true");
              break;
            case "next":
              a + 1 > e.totalPages && s.toggleClass(i.disabledClass).attr("aria-disabled", "true");
          }
        }), i.insertAfter ? e.container.append(e.ul).insertAfter(t(i.insertAfter)) : e.el.after(e.container.append(e.ul));
      },
      handle: function handle() {
        var a = this;
        a.container.find("li").each(function () {
          var e = t(this);
          e.click(function (t) {
            t.preventDefault();
            var i = e.data("page");
            a.currentPage = i, a.show(i);
          });
        });
      },
      show: function show(t) {
        this.render(t), this.handle();
      }
    }, t.fn.paginathing = function (t) {
      return this.each(function () {
        return new i(this, t);
      });
    }, t.fn.paginathing.defaults = {
      perPage: 10,
      limitPagination: !1,
      prevNext: !0,
      firstLast: !0,
      prevText: "&laquo;",
      nextText: "&raquo;",
      firstText: "First",
      lastText: "Last",
      containerClass: "pagination-container",
      ulClass: "pagination",
      liClass: "page-item",
      linkClass: "page-link",
      activeClass: "active",
      disabledClass: "disabled",
      insertAfter: null,
      pageNumbers: !1
    };
  }(jQuery);
}();